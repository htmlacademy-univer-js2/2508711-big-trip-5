(()=>{"use strict";class e{getTemplate(){return'\n      <form class="trip-filters">\n        <div class="trip-filters__filter">\n          <input id="filter-everything" type="radio" name="trip-filter" checked>\n          <label for="filter-everything">Everything</label>\n        </div>\n        <div class="trip-filters__filter">\n          <input id="filter-future" type="radio" name="trip-filter">\n          <label for="filter-future">Future</label>\n        </div>\n        <div class="trip-filters__filter">\n          <input id="filter-present" type="radio" name="trip-filter">\n          <label for="filter-present">Present</label>\n        </div>\n        <div class="trip-filters__filter">\n          <input id="filter-past" type="radio" name="trip-filter">\n          <label for="filter-past">Past</label>\n        </div>\n      </form>\n    '}render(e){e.insertAdjacentHTML("beforeend",this.getTemplate())}}class t{getTemplate(){return'\n      <div class="trip-sort">\n        <div class="trip-sort__item">\n          <input id="sort-day" type="radio" name="trip-sort" checked>\n          <label for="sort-day">Day</label>\n        </div>\n        <div class="trip-sort__item">\n          <input id="sort-price" type="radio" name="trip-sort">\n          <label for="sort-price">Price</label>\n        </div>\n      </div>\n    '}render(e){e.insertAdjacentHTML("beforeend",this.getTemplate())}}class i{constructor(e,t,i){this.point=e,this.destination=t.find((t=>t.id===e.destination)),this.offers=i[e.type]?.filter((t=>e.offers.includes(t.id)))}#e(e){return e.toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"})}#t(e,t){const i=t-e,n=Math.floor(i/6e4);return n<60?`${n}M`:`${Math.floor(n/60)}H ${n%60}M`}getTemplate(){const{type:e,dateFrom:t,dateTo:i,basePrice:n}=this.point;return`\n      <li class="trip-events__item">\n        <div class="event">\n          <div class="event__type">\n            <img class="event__type-icon" width="42" height="42" src="img/icons/${e}.png" alt="Event type icon">\n          </div>\n          <h3 class="event__title">${e} ${this.destination?.name||""}</h3>\n          <div class="event__schedule">\n            <p class="event__time">\n              <time class="event__start-time">${this.#e(t)}</time>\n              &mdash;\n              <time class="event__end-time">${this.#e(i)}</time>\n            </p>\n            <p class="event__duration">${this.#t(t,i)}</p>\n          </div>\n          <p class="event__price">\n            &euro;&nbsp;<span class="event__price-value">${n}</span>\n          </p>\n          ${this.offers?.length?`\n            <h4 class="visually-hidden">Offers:</h4>\n            <ul class="event__selected-offers">\n              ${this.offers.map((e=>`\n                <li class="event__offer">\n                  <span class="event__offer-title">${e.title}</span>\n                  &plus;&euro;&nbsp;<span class="event__offer-price">${e.price}</span>\n                </li>\n              `)).join("")}\n            </ul>\n          `:""}\n          <button class="event__rollup-btn" type="button">\n            <span class="visually-hidden">Open event</span>\n          </button>\n        </div>\n      </li>\n    `}render(e){e.insertAdjacentHTML("beforeend",this.getTemplate())}}class n{constructor(e,t,i,n,s,r,a,l){this.id=e,this.type=t,this.destination=i,this.dateFrom=n,this.dateTo=s,this.basePrice=r,this.offers=a,this.isFavorite=l}}const s=[{id:"d1",name:"Amsterdam",description:"Amsterdam, capital of the Netherlands",pictures:[]},{id:"d2",name:"Chamonix",description:"Chamonix, a resort area near Mont Blanc",pictures:[]},{id:"d3",name:"Geneva",description:"Geneva, Swiss city on Lake Geneva",pictures:[]}];class r{constructor(){this.destinations=s,this.offers={taxi:[{id:"taxi1",title:"Order Uber",price:20}],flight:[{id:"flight1",title:"Add luggage",price:50},{id:"flight2",title:"Switch to comfort",price:80}],drive:[{id:"drive1",title:"Rent a car",price:200}],"check-in":[{id:"checkin1",title:"Add breakfast",price:50}]},this.points=(this.destinations,[new n("p1","taxi","d1",new Date("2024-03-18T10:30:00"),new Date("2024-03-18T11:00:00"),20,["taxi1"],!1),new n("p2","flight","d2",new Date("2024-03-18T12:25:00"),new Date("2024-03-18T13:35:00"),160,["flight1","flight2"],!1),new n("p3","drive","d2",new Date("2024-03-18T14:30:00"),new Date("2024-03-18T16:05:00"),160,["drive1"],!1),new n("p4","check-in","d2",new Date("2024-03-18T16:20:00"),new Date("2024-03-18T17:00:00"),600,["checkin1"],!1)])}getDestinations(){return this.destinations}getOffers(){return this.offers}getPoints(){return this.points}}class a{constructor(){this.model=new r,this.listContainer=null}init(){this.renderFilters(),this.renderSort(),this.renderList(),this.renderPoints()}renderFilters(){(new e).render(document.querySelector(".trip-controls__filters"))}renderSort(){(new t).render(document.querySelector(".trip-events"))}renderList(){const e=document.querySelector(".trip-events"),t=document.createElement("ul");t.classList.add("trip-events__list"),e.appendChild(t),this.listContainer=t}renderPoints(){const e=this.model.getPoints(),t=this.model.getDestinations(),n=this.model.getOffers();e.forEach((e=>{new i(e,t,n).render(this.listContainer)}))}}document.addEventListener("DOMContentLoaded",(()=>{(new a).init()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,