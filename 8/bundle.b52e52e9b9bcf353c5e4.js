(()=>{"use strict";var e={56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},72:e=>{var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var r={},a=[],o=0;o<e.length;o++){var l=e[o],d=i.base?l[0]+i.base:l[0],c=r[d]||0,p="".concat(d," ").concat(c);r[d]=c+1;var h=n(p),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)t[h].references++,t[h].updater(u);else{var m=s(u,i);i.byIndex=o,t.splice(o,0,{identifier:p,updater:m,references:1})}a.push(p)}return a}function s(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,s){var r=i(e=e||[],s=s||{});return function(e){e=e||[];for(var a=0;a<r.length;a++){var o=n(r[a]);t[o].references--}for(var l=i(e,s),d=0;d<r.length;d++){var c=n(r[d]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}r=l}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,s,r){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(i)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(a[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);i&&a[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),s&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=s):c[4]="".concat(s)),t.push(c))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),r="/*# ".concat(s," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},362:(e,t,n)=>{n.d(t,{A:()=>o});var i=n(354),s=n.n(i),r=n(314),a=n.n(r)()(s());a.push([e.id,".shake {\n  animation: shake 0.6s;\n  position: relative;\n  z-index: 10;\n}\n\n@keyframes shake {\n  0%,\n  100% {\n    transform: translateX(0);\n  }\n\n  10%,\n  30%,\n  50%,\n  70%,\n  90% {\n    transform: translateX(-5px);\n  }\n\n  20%,\n  40%,\n  60%,\n  80% {\n    transform: translateX(5px);\n  }\n}\n","",{version:3,sources:["webpack://./src/framework/view/abstract-view.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,WAAW;AACb;;AAEA;EACE;;IAEE,wBAAwB;EAC1B;;EAEA;;;;;IAKE,2BAA2B;EAC7B;;EAEA;;;;IAIE,0BAA0B;EAC5B;AACF",sourcesContent:[".shake {\n  animation: shake 0.6s;\n  position: relative;\n  z-index: 10;\n}\n\n@keyframes shake {\n  0%,\n  100% {\n    transform: translateX(0);\n  }\n\n  10%,\n  30%,\n  50%,\n  70%,\n  90% {\n    transform: translateX(-5px);\n  }\n\n  20%,\n  40%,\n  60%,\n  80% {\n    transform: translateX(5px);\n  }\n}\n"],sourceRoot:""}]);const o=a},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},659:e=>{var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var s=void 0!==n.layer;s&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,s&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}}},t={};function n(i){var s=t[i];if(void 0!==s)return s.exports;var r=t[i]={id:i,exports:{}};return e[i](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var i=n(72),s=n.n(i),r=n(825),a=n.n(r),o=n(659),l=n.n(o),d=n(56),c=n.n(d),p=n(540),h=n.n(p),u=n(113),m=n.n(u),v=n(362),f={};f.styleTagTransform=m(),f.setAttributes=c(),f.insert=l().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=h(),s()(v.A,f),v.A&&v.A.locals&&v.A.locals;const _="shake";class y{#e=null;constructor(){if(new.target===y)throw new Error("Can't instantiate AbstractView, only concrete one.")}get element(){return this.#e||(this.#e=function(e){const t=document.createElement("div");return t.innerHTML=e,t.firstElementChild}(this.template)),this.#e}get template(){throw new Error("Abstract method not implemented: get template")}removeElement(){this.#e=null}shake(e){this.element.classList.add(_),setTimeout((()=>{this.element.classList.remove(_),e?.()}),600)}}function g(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"beforeend";if(!(e instanceof y))throw new Error("Can render only components");if(null===t)throw new Error("Container element doesn't exist");t.insertAdjacentElement(n,e.element)}function C(e,t){if(!(e instanceof y&&t instanceof y))throw new Error("Can replace only components");const n=e.element,i=t.element,s=i.parentElement;if(null===s)throw new Error("Parent element doesn't exist");s.replaceChild(n,i)}function b(e){if(null!==e){if(!(e instanceof y))throw new Error("Can remove only components");e.element.remove(),e.removeElement()}}class E{constructor(e,t,n,i,s,r,a,o){this.id=e,this.type=t,this.destination=n,this.dateFrom=i,this.dateTo=s,this.basePrice=r,this.offers=a,this.isFavorite=o}}const w=[{id:"d1",name:"Amsterdam",description:"Amsterdam, capital of the Netherlands",pictures:[]},{id:"d2",name:"Chamonix",description:"Chamonix, a resort area near Mont Blanc",pictures:[]},{id:"d3",name:"Geneva",description:"Geneva, Swiss city on Lake Geneva",pictures:[]}];class k{constructor(){this.destinations=w,this.offers={taxi:[{id:"taxi1",title:"Order Uber",price:20}],flight:[{id:"flight1",title:"Add luggage",price:50},{id:"flight2",title:"Switch to comfort",price:80}],drive:[{id:"drive1",title:"Rent a car",price:200}],"check-in":[{id:"checkin1",title:"Add breakfast",price:50}]},this.points=(this.destinations,[new E("p1","taxi","d1",new Date("2024-03-18T10:30:00"),new Date("2024-03-18T11:00:00"),20,["taxi1"],!1),new E("p2","flight","d2",new Date("2024-03-18T12:25:00"),new Date("2024-03-18T13:35:00"),160,["flight1","flight2"],!1),new E("p3","drive","d2",new Date("2024-03-18T14:30:00"),new Date("2024-03-18T16:05:00"),160,["drive1"],!1),new E("p4","check-in","d2",new Date("2024-03-18T16:20:00"),new Date("2024-03-18T17:00:00"),600,["checkin1"],!1)])}getDestinations(){return this.destinations}getOffers(){return this.offers}getPoints(){return this.points}getPointById(e){return this.points.find((t=>t.id===e))}updatePoint(e){const t=this.points.findIndex((t=>t.id===e.id));if(-1===t)throw new Error(`Can't update unexisting point with id: ${e.id}`);this.points[t]=e}}class A extends y{#t=[];constructor(e){super(),this.#t=e}get template(){return`\n      <form class="trip-filters">\n        ${this.#t.map((e=>{let{type:t,name:n,isDisabled:i,isChecked:s}=e;return`\n          <div class="trip-filters__filter">\n            <input\n              id="filter-${t}"\n              class="trip-filters__filter-input visually-hidden"\n              type="radio"\n              name="trip-filter"\n              value="${t}"\n              ${s?"checked":""}\n              ${i?"disabled":""}\n            >\n            <label class="trip-filters__filter-label" for="filter-${t}">${n}</label>\n          </div>\n        `})).join("")}\n        <button class="visually-hidden" type="submit">Accept filter</button>\n      </form>\n    `}}class T extends y{#n=[];#i=null;constructor(e,t){super(),this.#n=e,this.#i=t,this.element.addEventListener("change",this.#s)}get template(){return`\n      <div class="trip-sort">\n        ${this.#n.map((e=>{let{type:t,name:n,isChecked:i}=e;return`\n          <div class="trip-sort__item">\n            <input id="sort-${t}" type="radio" name="trip-sort" value="${t}" ${i?"checked":""}>\n            <label for="sort-${t}">${n}</label>\n          </div>\n        `})).join("")}\n      </div>\n    `}#s=e=>{"trip-sort"===e.target.name&&this.#i(e.target.value)}}class F extends y{get template(){return'\n      <p class="trip-events__msg">\n        Click New Event to create your first point\n      </p>\n    '}}function x(e){return e.toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"})}class D extends y{#r=null;#a=null;#o=null;#l=null;#d=null;constructor(e,t,n,i,s){super(),this.#r=e,this.#a=t.find((t=>t.id===e.destination)),this.#o=n[e.type]?.filter((t=>e.offers.includes(t.id))),this.#l=i,this.#d=s,this.element.querySelector(".event__rollup-btn").addEventListener("click",this.#c),this.element.querySelector(".event__favorite-btn").addEventListener("click",this.#p)}get template(){const{isFavorite:e}=this.#r,t=e?"event__favorite-btn--active":"";return`\n      <li class="trip-events__item">\n        <div class="event">\n          <div class="event__type">\n            <img class="event__type-icon" width="42" height="42"\n                 src="img/icons/${this.#r.type}.png" alt="Event type icon">\n          </div>\n          <h3 class="event__title">${this.#r.type} ${this.#a?.name||""}</h3>\n          <div class="event__schedule">\n            <p class="event__time">\n              <time class="event__start-time">${x(this.#r.dateFrom)}</time>\n              &mdash;\n              <time class="event__end-time">${x(this.#r.dateTo)}</time>\n            </p>\n            <p class="event__duration">${function(e,t){const n=t-e,i=Math.floor(n/6e4);return i<60?`${i}M`:`${Math.floor(i/60)}H ${i%60}M`}(this.#r.dateFrom,this.#r.dateTo)}</p>\n          </div>\n          <p class="event__price">\n            &euro;&nbsp;<span class="event__price-value">${this.#r.basePrice}</span>\n          </p>\n          <button class="event__favorite-btn ${t}" type="button">\n            <span class="visually-hidden">Add to favorite</span>\n            <svg class="event__favorite-icon" width="28" height="28" viewBox="0 0 28 28">\n              <path d="M14 21l-8.22899 4.3262 1.57159-9.1631L.685209 9.67376 9.8855 8.33688 14 0l4.1145 8.33688 9.2003 1.33688-6.6574 6.48934 1.5716 9.1631L14 21z"/>\n            </svg>\n          </button>\n          <button class="event__rollup-btn" type="button">\n            <span class="visually-hidden">Open event</span>\n          </button>\n        </div>\n      </li>\n    `}#c=e=>{e.preventDefault(),this.#l(this.#r)};#p=e=>{e.preventDefault(),this.#d({...this.#r,isFavorite:!this.#r.isFavorite})};updateElement(e){this.#r=e;const t=this.element,n=t.parentElement;this.removeElement();const i=this.element;n.replaceChild(i,t),this.#h()}#h(){this.element.querySelector(".event__rollup-btn").addEventListener("click",this.#c),this.element.querySelector(".event__favorite-btn").addEventListener("click",this.#p)}}class P extends y{_state={};updateElement(e){e&&(this._setState(e),this.#u())}_restoreHandlers(){throw new Error("Abstract method not implemented: restoreHandlers")}_setState(e){this._state=structuredClone({...this._state,...e})}#u(){const e=this.element,t=e.parentElement;this.removeElement();const n=this.element;t.replaceChild(n,e),this._restoreHandlers()}}class $ extends P{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];super(),this._state=this.#m(e,t,n),this.#v()}get template(){const{type:e,destination:t,dateFrom:n,dateTo:i,basePrice:s,offers:r}=this._state;return`\n      <form class="event event--edit">\n        <header class="event__header">\n          <div class="event__type-wrapper">\n            <label class="event__type  event__type-btn" for="event-type-toggle-1">\n              <span class="visually-hidden">Choose event type</span>\n              <img class="event__type-icon" width="17" height="17" src="img/icons/${e}.png" alt="Event type icon">\n            </label>\n            <input class="event__type-toggle  visually-hidden" id="event-type-toggle-1" type="checkbox">\n\n            <div class="event__type-list">\n              <fieldset class="event__type-group">\n                <legend class="visually-hidden">Event type</legend>\n              </fieldset>\n            </div>\n          </div>\n\n          <div class="event__field-group  event__field-group--destination">\n            <label class="event__label  event__type-output" for="event-destination-1">\n              ${e}\n            </label>\n            <input class="event__input  event__input--destination" id="event-destination-1" type="text" name="event-destination" value="${t.name}" list="destination-list-1">\n            <datalist id="destination-list-1">\n            </datalist>\n          </div>\n\n          <div class="event__field-group  event__field-group--time">\n            <label class="visually-hidden" for="event-start-time-1">From</label>\n            <input class="event__input  event__input--time" id="event-start-time-1" type="text" name="event-start-time" value="${n}">\n            &mdash;\n            <label class="visually-hidden" for="event-end-time-1">To</label>\n            <input class="event__input  event__input--time" id="event-end-time-1" type="text" name="event-end-time" value="${i}">\n          </div>\n\n          <div class="event__field-group  event__field-group--price">\n            <label class="event__label" for="event-price-1">\n              <span class="visually-hidden">Price</span>\n              &euro;\n            </label>\n            <input class="event__input  event__input--price" id="event-price-1" type="text" name="event-price" value="${s}">\n          </div>\n\n          <button class="event__save-btn  btn  btn--blue" type="submit">Save</button>\n          <button class="event__reset-btn" type="reset">Delete</button>\n          <button class="event__rollup-btn" type="button">\n            <span class="visually-hidden">Open event</span>\n          </button>\n        </header>\n        <section class="event__details">\n          ${this.#f(r)}\n        </section>\n      </form>\n    `}#m=(e,t,n)=>({...e,destination:t.find((t=>t.id===e.destination))||{name:""},offers:n[e.type]?.filter((t=>e.offers.includes(t.id)))||[]});#f=e=>e?.length?`\n      <section class="event__section  event__section--offers">\n        <h3 class="event__section-title  event__section-title--offers">Offers</h3>\n        <div class="event__available-offers">\n          ${e.map((e=>`\n            <div class="event__offer-selector">\n              <input class="event__offer-checkbox  visually-hidden"\n                     id="event-offer-${e.id}"\n                     type="checkbox"\n                     name="event-offer"\n                     value="${e.id}"\n                     ${this._state.offers.includes(e.id)?"checked":""}>\n              <label class="event__offer-label" for="event-offer-${e.id}">\n                <span class="event__offer-title">${e.title}</span>\n                &plus;&euro;&nbsp;\n                <span class="event__offer-price">${e.price}</span>\n              </label>\n            </div>\n          `)).join("")}\n        </div>\n      </section>\n    `:"";#v=()=>{};_restoreHandlers=()=>{this.#v()}}class S{#r=null;#_=null;#o=null;#y=null;#g=null;#C=null;#b=null;#E=null;#w="DEFAULT";constructor(e,t,n,i,s){this.#C=e,this.#b=t,this.#E=n,this.#_=i,this.#o=s}init(e){this.#r=e;const t=this.#y,n=this.#g;this.#y=new D(this.#r,this.#_,this.#o,this.#l,this.#d),this.#g=new $(this.#r,this.#_,this.#o,this.#k,this.#A),null!==t&&null!==n?("DEFAULT"===this.#w&&C(this.#y,t),"EDITING"===this.#w&&C(this.#g,n),b(t),b(n)):g(this.#y,this.#C)}destroy(){b(this.#y),b(this.#g)}resetView(){"DEFAULT"!==this.#w&&this.#T()}#F(){this.#E(),C(this.#g,this.#y),this.#w="EDITING",document.addEventListener("keydown",this.#x)}#T(){C(this.#y,this.#g),this.#w="DEFAULT",document.removeEventListener("keydown",this.#x)}#l=()=>{this.#F()};#d=e=>{this.#b(e)};#k=e=>{this.#b(e),this.#T()};#A=()=>{this.#T()};#x=e=>{"Escape"!==e.key&&"Esc"!==e.key||(e.preventDefault(),this.#T())}}class L{#D=(()=>new k)();#C=null;#P=null;#$=null;#S=null;#L=(()=>new Map)();#H="everything";#M="day";init(){this.#I(),this.#B(),this.#O(),this.#j()}#I(){const e=[{type:"everything",name:"Everything",isDisabled:!1,isChecked:"everything"===this.#H},{type:"future",name:"Future",isDisabled:!1,isChecked:"future"===this.#H},{type:"present",name:"Present",isDisabled:!0,isChecked:"present"===this.#H},{type:"past",name:"Past",isDisabled:!1,isChecked:"past"===this.#H}],t=document.querySelector(".trip-controls__filters");this.#P=new A(e),g(this.#P,t),this.#P.element.addEventListener("change",(e=>{"trip-filter"===e.target.name&&this.#q(e.target.id.replace("filter-",""))}))}#q=e=>{this.#H=e,this.#N(),this.#j()};#B(){const e=[{type:"day",name:"Day",isChecked:"day"===this.#M},{type:"price",name:"Price",isChecked:"price"===this.#M}],t=document.querySelector(".trip-events");this.#$=new T(e,this.#s),g(this.#$,t)}#s=e=>{e!==this.#M&&(this.#M=e,this.#N(),this.#j())};#O(){const e=document.querySelector(".trip-events"),t=document.createElement("ul");t.classList.add("trip-events__list"),e.appendChild(t),this.#C=t}#N(){this.#L.forEach((e=>e.destroy())),this.#L.clear()}#U(){let e=this.#D.getPoints();switch(this.#H){case"future":e=e.filter((e=>new Date(e.dateFrom)>new Date));break;case"past":e=e.filter((e=>new Date(e.dateFrom)<new Date));break;case"present":e=[]}switch(this.#M){case"day":e.sort(((e,t)=>new Date(e.dateFrom)-new Date(t.dateFrom)));break;case"price":e.sort(((e,t)=>t.basePrice-e.basePrice))}return e}#j(){this.#C.innerHTML="";const e=this.#U(),t=this.#D.getDestinations(),n=this.#D.getOffers();0!==e.length?e.forEach((e=>{const i=new S(this.#C,this.#b,this.#E,t,n);i.init(e),this.#L.set(e.id,i)})):this.#R()}#R(){this.#S=new F,g(this.#S,this.#C)}#b=e=>{this.#D.updatePoint(e),this.#L.get(e.id).init(e)};#E=()=>{this.#L.forEach((e=>e.resetView()))}}document.addEventListener("DOMContentLoaded",(()=>{(new L).init()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,